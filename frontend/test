// // routes/playground.js
// //Create an endpoint to add a playground to favorites:
// //In your backend, create a new route to handle adding a playground to a user's favorites. Modify your routes accordingly:
// const express = require('express');
// const router = express.Router();
// const authenticateToken = require('../middleware/authenticateToken'); // Import your authentication middleware
// const User = require('../models/user');
// const Favorites = require('../models/favorites');

// // Endpoint to add a playground to favorites
// router.post('/add-to-favorites', authenticateToken, async (req, res) => {
//   try {
//     // Check if the playground already exists in the user's favorites
//     const user = await User.findById(req.userId).populate('favorites');
//     const existingFavorite = user.favorites.find((fav) => fav.apiId === req.body.apiId);

//     if (existingFavorite) {
//       return res.status(400).send('Playground already in favorites');
//     }

//     // Create a new favorite and add it to the user's favorites
//     const newFavorite = new Favorites({ apiId: req.body.apiId, like: true });
//     await newFavorite.save();
    
//     user.favorites.push(newFavorite);
//     await user.save();

//     res.status(201).json({ message: 'Playground added to favorites successfully' });
//   } catch (error) {
//     console.error(error);
//     res.status(500).send('Something went wrong');
//   }
// });

// // Add other playground-related endpoints as needed

// module.exports = router;



// // Create a function to add a playground to favorites:
// // In your React frontend, create a function to handle adding a playground to the user's favorites. You can use fetch or a library like axios for making API requests.


// // Playground component or wherever you handle playgrounds
// const addToFavorites = async (apiId) => {
//   try {
//     const token = localStorage.getItem('token'); // Get the user's JWT token from local storage
//     const response = await fetch('http://localhost:3002/api/playground/add-to-favorites', {
//       method: 'POST',
//       headers: {
//         'Content-Type': 'application/json',
//         'Authorization': `Bearer ${token}`,
//       },
//       body: JSON.stringify({ apiId }),
//     });

//     if (response.ok) {
//       console.log('Playground added to favorites successfully');
//       // Optionally, update the UI to reflect the change
//     } else {
//       console.error('Failed to add playground to favorites');
//       // Handle error and provide user feedback
//     }
//   } catch (error) {
//     console.error('Something went wrong:', error);
//     // Handle error and provide user feedback
//   }
// };



// // Wherever you render the playgrounds in your UI, provide an option/button for the user to add the playground to their favorites. Call the addToFavorites function when the user interacts with this option.



// // PlaygroundList component or wherever you render playgrounds
// const PlaygroundList = ({ playgrounds }) => {
//   return (
//     <div>
//       {playgrounds.map(playground => (
//         <div key={playground.apiId}>
//           <h3>{playground.name}</h3>
//           <p>{playground.description}</p>
//           <button onClick={() => addToFavorites(playground.apiId)}>Add to Favorites</button>
//         </div>
//       ))}
//     </div>
//   );
// };



// //New playgroundStore

// // playgroundStore.js
// import { create } from "zustand";

// const playgroundAPI = `https://catalog.eslov.se/rowstore/dataset/08b5e92d-7bc7-41de-aa56-f67f6662e919`;

// const usePlaygroundStore = create((set) => ({
//   playgrounds: [],
//   playgroundDetails: null,
//   isLiked: false, // Add isLiked state to track if the playground is liked
//   fetchPlaygrounds: async () => {
//     try {
//       const response = await fetch(playgroundAPI);
//       const data = await response.json();
//       const playgrounds = data.results.map((playground) => ({
//         name: playground.name,
//         description: playground.description,
//         id: playground.id
//       }));
//       set({ playgrounds });
//     } catch (error) {
//       console.error("Error fetching playgrounds:", error);
//     }
//   },
//   getPlaygroundDetails: async (id) => {
//     try {
//       const response = await fetch(`${playgroundAPI}?id=${id}&_limit=1&_offset=0`);
      
//       if (!response.ok) {
//         throw new Error(`Error fetching playground details: ${response.statusText}`);
//       }

//       const data = await response.json();
      
//       if (!data || !data.results || data.results.length === 0) {
//         throw new Error("Empty response or invalid JSON format");
//       }

//       const playgroundDetails = {
//         name: data.results[0].name,
//         description: data.results[0].description,
//         city: data.results[0].city,
//         street: data.results[0].street,
//         postcode: data.results[0].postcode,
//         wheelchair: data.results[0].wheelchair,
//         roundabout: data.results[0].roundabout,
//         zipwire: data.results[0].zipwire,
//         swing: data.results[0].swing,
//         slide: data.results[0].slide,
//         basketswing: data.results[0].basketswing,
//         sandpit: data.results[0].sandpit
//       };
//       set({ playgroundDetails });
//     } catch (error) {
//       console.error("Error fetching playground details:", error.message);
//     }
//   },
//   likePlayground: async () => {
//     const { id, name } = playgroundDetails;
//     try {
//       const response = await fetch('http://localhost:3002/api/playground/add-to-favorites', {
//         method: 'POST',
//         headers: {
//           'Content-Type': 'application/json',
//           'Authorization': `Bearer ${localStorage.getItem('token')}`,
//         },
//         body: JSON.stringify({ apiId: id, name }),
//       });

//       if (response.ok) {
//         console.log('Playground added to favorites successfully');
//         set({ isLiked: true });
//       } else {
//         console.error('Failed to add playground to favorites');
//       }
//     } catch (error) {
//       console.error('Something went wrong:', error);
//     }
//   },
// }));

// export default usePlaygroundStore;



// //New playgroundDetails.jsx
// // PlaygroundDetails.jsx
// // ... (import statements)

// const PlaygroundDetails = () => {
//   const { id } = useParams();
//   const { getPlaygroundDetails, playgroundDetails, isLiked, likePlayground } = usePlaygroundStore();

//   useLayoutEffect(() => {
//     getPlaygroundDetails(id);
//   }, [id, getPlaygroundDetails]);

//   if (!playgroundDetails) {
//     return <div>Loading...</div>;
//   }

//   return (
//     <div>
//       {/* ... (other components) */}
//       <div>
//         <button onClick={likePlayground}>Like Playground</button>
//         <span>{isLiked ? 'Liked!' : 'Not liked yet'}</span>
//       </div>
//     </div>
//   );
// };

// export default PlaygroundDetails;


// // To display the logged-in user's favorite playgrounds on the MyFavorites page, you'll need to fetch the user's favorites from the backend and render them in your component. Here's how you can modify your MyFavorites component:

// import React, { useEffect, useState } from 'react';
// import { LogOut } from '../../components/LogOut';
// import usePlaygroundStore from '../../stores/usePlaygroundStore';

// const MyFavorites = () => {
//   const [favorites, setFavorites] = useState([]);
//   const { fetchUserFavorites } = usePlaygroundStore();

//   useEffect(() => {
//     // Fetch the user's favorites when the component mounts
//     fetchUserFavorites()
//       .then((userFavorites) => {
//         setFavorites(userFavorites);
//       })
//       .catch((error) => {
//         console.error('Error fetching user favorites:', error);
//       });
//   }, [fetchUserFavorites]);

//   return (
//     <div className="home-container">
//       <h1>Welcome to the secret page</h1>
//       <LogOut />

//       <h2>Your Favorite Playgrounds</h2>
//       {favorites.length === 0 ? (
//         <p>No favorites yet.</p>
//       ) : (
//         <ul>
//           {favorites.map((favorite) => (
//             <li key={favorite.id}>
//               {favorite.name} - {favorite.description}
//               {/* Add more details if needed */}
//             </li>
//           ))}
//         </ul>
//       )}
//     </div>
//   );
// };

// export default MyFavorites;

// // In this example, I've assumed that you have a function named fetchUserFavorites in your usePlaygroundStore that retrieves the user's favorites from the backend. You would need to add this function to your usePlaygroundStore similarly to how you implemented the likePlayground function.

// // playgroundStore.js
// // ... (other imports)

// const usePlaygroundStore = create((set) => ({
//   // ... (other state and functions)

//   fetchUserFavorites: async () => {
//     try {
//       const token = localStorage.getItem('token');
//       const response = await fetch('http://localhost:3002/api/user/favorites', {
//         method: 'GET',
//         headers: {
//           'Content-Type': 'application/json',
//           'Authorization': `Bearer ${token}`,
//         },
//       });

//       if (response.ok) {
//         const data = await response.json();
//         return data.favorites; // Assuming the response has a property named 'favorites'
//       } else {
//         throw new Error(`Error fetching user favorites: ${response.statusText}`);
//       }
//     } catch (error) {
//       console.error('Error fetching user favorites:', error);
//       throw error;
//     }
//   },
// }));

// export default usePlaygroundStore;


// // This is a general structure, and you might need to adjust the code based on the actual structure of your backend API and how the user's favorites are stored. Make sure that your backend has an endpoint for fetching the user's favorites and that the data returned includes the necessary playground details.